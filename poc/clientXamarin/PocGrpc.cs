// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/poc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Services.Poc {
  public static class Logging
  {
    static readonly string __ServiceName = "b2beauty.poc.Logging";

    static readonly Marshaller<global::Services.Poc.MessageRequest> __Marshaller_MessageRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.Poc.MessageRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Services.Poc.MessageResponse> __Marshaller_MessageResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.Poc.MessageResponse.Parser.ParseFrom);

    static readonly Method<global::Services.Poc.MessageRequest, global::Services.Poc.MessageResponse> __Method_SendMessage = new Method<global::Services.Poc.MessageRequest, global::Services.Poc.MessageResponse>(
        MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_MessageRequest,
        __Marshaller_MessageResponse);

    static readonly Method<global::Services.Poc.MessageRequest, global::Services.Poc.MessageResponse> __Method_ReceiveMessage = new Method<global::Services.Poc.MessageRequest, global::Services.Poc.MessageResponse>(
        MethodType.Unary,
        __ServiceName,
        "ReceiveMessage",
        __Marshaller_MessageRequest,
        __Marshaller_MessageResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.Poc.PocReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Logging</summary>
    public abstract class LoggingBase
    {
      /// <summary>
      /// / Used to write a log
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Services.Poc.MessageResponse> SendMessage(global::Services.Poc.MessageRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.Poc.MessageResponse> ReceiveMessage(global::Services.Poc.MessageRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Logging</summary>
    public class LoggingClient : ClientBase<LoggingClient>
    {
      /// <summary>Creates a new client for Logging</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoggingClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Logging that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoggingClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoggingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoggingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// / Used to write a log
      /// </summary>
      public virtual global::Services.Poc.MessageResponse SendMessage(global::Services.Poc.MessageRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendMessage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// / Used to write a log
      /// </summary>
      public virtual global::Services.Poc.MessageResponse SendMessage(global::Services.Poc.MessageRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      /// <summary>
      /// / Used to write a log
      /// </summary>
      public virtual AsyncUnaryCall<global::Services.Poc.MessageResponse> SendMessageAsync(global::Services.Poc.MessageRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendMessageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// / Used to write a log
      /// </summary>
      public virtual AsyncUnaryCall<global::Services.Poc.MessageResponse> SendMessageAsync(global::Services.Poc.MessageRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual global::Services.Poc.MessageResponse ReceiveMessage(global::Services.Poc.MessageRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReceiveMessage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.Poc.MessageResponse ReceiveMessage(global::Services.Poc.MessageRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReceiveMessage, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.Poc.MessageResponse> ReceiveMessageAsync(global::Services.Poc.MessageRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReceiveMessageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.Poc.MessageResponse> ReceiveMessageAsync(global::Services.Poc.MessageRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReceiveMessage, null, options, request);
      }
      protected override LoggingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoggingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(LoggingBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage)
          .AddMethod(__Method_ReceiveMessage, serviceImpl.ReceiveMessage).Build();
    }

  }
}
#endregion
